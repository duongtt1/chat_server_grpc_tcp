// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/chat.proto

#include "protos/chat.pb.h"
#include "protos/chat.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ChatPackage {

static const char* ChatStream_method_names[] = {
  "/ChatPackage.ChatStream/JoinRoom",
  "/ChatPackage.ChatStream/ChatStream",
};

std::unique_ptr< ChatStream::Stub> ChatStream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChatStream::Stub> stub(new ChatStream::Stub(channel, options));
  return stub;
}

ChatStream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_JoinRoom_(ChatStream_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChatStream_(ChatStream_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status ChatStream::Stub::JoinRoom(::grpc::ClientContext* context, const ::ChatPackage::JoinRoomReq& request, ::ChatPackage::JoinRoomRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ChatPackage::JoinRoomReq, ::ChatPackage::JoinRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JoinRoom_, context, request, response);
}

void ChatStream::Stub::async::JoinRoom(::grpc::ClientContext* context, const ::ChatPackage::JoinRoomReq* request, ::ChatPackage::JoinRoomRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ChatPackage::JoinRoomReq, ::ChatPackage::JoinRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinRoom_, context, request, response, std::move(f));
}

void ChatStream::Stub::async::JoinRoom(::grpc::ClientContext* context, const ::ChatPackage::JoinRoomReq* request, ::ChatPackage::JoinRoomRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ChatPackage::JoinRoomRes>* ChatStream::Stub::PrepareAsyncJoinRoomRaw(::grpc::ClientContext* context, const ::ChatPackage::JoinRoomReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ChatPackage::JoinRoomRes, ::ChatPackage::JoinRoomReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JoinRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ChatPackage::JoinRoomRes>* ChatStream::Stub::AsyncJoinRoomRaw(::grpc::ClientContext* context, const ::ChatPackage::JoinRoomReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJoinRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::ChatPackage::ClientMessage, ::ChatPackage::ServerMessage>* ChatStream::Stub::ChatStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::ChatPackage::ClientMessage, ::ChatPackage::ServerMessage>::Create(channel_.get(), rpcmethod_ChatStream_, context);
}

void ChatStream::Stub::async::ChatStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ChatPackage::ClientMessage,::ChatPackage::ServerMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::ChatPackage::ClientMessage,::ChatPackage::ServerMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_ChatStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::ChatPackage::ClientMessage, ::ChatPackage::ServerMessage>* ChatStream::Stub::AsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ChatPackage::ClientMessage, ::ChatPackage::ServerMessage>::Create(channel_.get(), cq, rpcmethod_ChatStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::ChatPackage::ClientMessage, ::ChatPackage::ServerMessage>* ChatStream::Stub::PrepareAsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ChatPackage::ClientMessage, ::ChatPackage::ServerMessage>::Create(channel_.get(), cq, rpcmethod_ChatStream_, context, false, nullptr);
}

ChatStream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatStream_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatStream::Service, ::ChatPackage::JoinRoomReq, ::ChatPackage::JoinRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatStream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChatPackage::JoinRoomReq* req,
             ::ChatPackage::JoinRoomRes* resp) {
               return service->JoinRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatStream_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ChatStream::Service, ::ChatPackage::ClientMessage, ::ChatPackage::ServerMessage>(
          [](ChatStream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::ChatPackage::ServerMessage,
             ::ChatPackage::ClientMessage>* stream) {
               return service->ChatStream(ctx, stream);
             }, this)));
}

ChatStream::Service::~Service() {
}

::grpc::Status ChatStream::Service::JoinRoom(::grpc::ServerContext* context, const ::ChatPackage::JoinRoomReq* request, ::ChatPackage::JoinRoomRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatStream::Service::ChatStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ChatPackage::ServerMessage, ::ChatPackage::ClientMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ChatPackage

